# Индивидуальная задача множества и словари 
# 9) Первая строка содержит число команд в футбольном турнире N. 
# Далее идут N строк, описывающих команды, каждая строка состоит из названия команды и числа набранных очков. 
# Далее идут записи результатов матчей. 
# Одна строка соответствует одному матчу и содержит название двух команд, игравших в этом матче, и итог матча (победа, ничья или поражение). 
# Выведите список команд, упорядоченный по убыванию числа набранных ими очков, а при равенстве числа очков: в лексикографическом порядке. 
# После названия команды выведите число набранных ею очков.


n = int(input("Введите количество команд: ")) # Ввод данных
teams = {} # словарь: название каждой команды - ключ, а количество очков этой команды - значение

# Считываем команды и начальные очки
for _ in range(n):
    line = input().split() # разбивает считанную строку str на список слов str
    team_name = ' '.join(line[:-1]) # склеивает все слова кроме последнего (числа очков) в цельное название str
    points = int(line[-1]) # переводит последнее знначениие строки в int и записывает
    teams[team_name] = points # с ключом названием записывает в словарь очки

# Считываем результаты матчей и обновляем очки
while True:
    try:
        match_result = input().split()
        if len(match_result) < 3:
            # Если строка пустая или не содержит трех элементов, выходим из цикла
            break
        
        team1 = match_result[0] # название первой команды в матче
        team2 = match_result[1] # название второй команды в матче
        result = match_result[2] # результат матча

        # Обновляем очки в зависимости от результата
        if result == "победа":
            teams[team1] += 3
        elif result == "ничья":
            teams[team1] += 1
            teams[team2] += 1
        elif result == "поражение":
            teams[team2] += 3
    except EOFError:
        # Останавливаем ввод, когда достигнут конец данных
        break


sorted_teams = sorted(teams.items(), key=lambda x: (-x[1], x[0])) 
# преобразует словарь в список пар
# сортируем первостепенно в обратном порядке по x[1] (по убыванию очков), затем в обычном порядке по x[0] (алфавитном порядке, если очки равны)

# Вывод результата
for team, points in sorted_teams: # происходит распаковка каждого 
    print(team, points)
